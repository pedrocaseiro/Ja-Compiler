define i32 @main(i32 %argc, i8** %argv){
    call void @gcd2.method.main.stringArray(i32 %argc, i8** %argv)
    ret i32 0
}
declare i32 @printf(i8*, ...)
declare i32 @atoi(...)
define void @printBoolean(i1 %b) {
    %1 = alloca i1
    store i1 %b, i1* %1
    %2 = load i1, i1* %1
    %3 = icmp eq i1 %2, 0
    br i1 %3, label %false, label %true
    false:
    %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.false, i32 0, i32 0))
    br label %ret
    true:
    %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.true, i32 0, i32 0))
    br label %ret
    ret:
    ret void
}
@gcd2.a = common global double 0.0
@gcd2.b = common global double 0.0
@gcd2.d = common global i1 0
@gcd2.c = common global i1 0
define void @gcd2.method.main.stringArray(i32 %argc, i8** %argv){
    %argc.addr = alloca i32
    %argv.addr = alloca i8**
    store i32 %argc, i32* %argc.addr
    store i8** %argv, i8*** %argv.addr
    %1 = alloca i32
    %.length = alloca i32
    store i32 %argc, i32* %1
    %2 = load i32, i32* %1
    %3 = sub nsw i32 %2, 1
    store i32 %3, i32* %.length



    %4 = load i1, i1* @gcd2.c
    %5 = alloca i1
    store i1 1, i1* %5
    %6 = load i1, i1* %5
    store i1 %6, i1* @gcd2.c
    %7 = load i1, i1* @gcd2.c
    %8 = load i1, i1* @gcd2.d
    %9 = alloca i1
    store i1 0, i1* %9
    %10 = load i1, i1* %9
    store i1 %10, i1* @gcd2.d
    %11 = load i1, i1* @gcd2.d
    %a = alloca i32
    %12 = load i32, i32* %a
    %13 = alloca i32
    store i32 0, i32* %13
    %14 = load i32, i32* %13
    store i32 %14, i32* %a
    %15 = load i32, i32* %a
    %16 = load i32, i32* %a
    %17 = alloca i32
    store i32 0, i32* %17
    %18 = load i32, i32* %17
    store i32 %18, i32* %a
    %19 = load i32, i32* %a
    %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.string.0, i32 0, i32 0), i32 0)
    %21 = load i32, i32* %a
    %22 = load i32, i32* %a
    %23 = alloca i32
    store i32 1, i32* %23
    %24 = load i32, i32* %23
%25 = add i32 %22, %24
    store i32 %25, i32* %a
    %26 = load i32, i32* %a
    %27 = load i32, i32* %a
    %28 = alloca i32
    store i32 5, i32* %28
    %29 = load i32, i32* %28
%30 = icmp sle i32 %27, %29
    br i1 %30, label %label.body0, label %label.end0
label.body0: 
    %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.string.1, i32 0, i32 0), i32 0)
    %32 = load i32, i32* %a
    %33 = load i32, i32* %a
    %34 = alloca i32
    store i32 1, i32* %34
    %35 = load i32, i32* %34
%36 = add i32 %33, %35
    store i32 %36, i32* %a
    %37 = load i32, i32* %a
    %38 = load i32, i32* %a
    %39 = alloca i32
    store i32 5, i32* %39
    %40 = load i32, i32* %39
%41 = icmp sle i32 %38, %40
    br i1 %41, label %label.body0, label %label.end0
label.end0:
    ret void
}
@.str.string.0 = private unnamed_addr constant [5 x i8] c"Yes\0A\00"
@.str.string.1 = private unnamed_addr constant [5 x i8] c"Yes\0A\00"
@.str.int = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@.str.double = private unnamed_addr constant [7 x i8] c"%.16E\0A\00"
@.str.true = private unnamed_addr constant [6 x i8] c"true\0A\00"
@.str.false = private unnamed_addr constant [7 x i8] c"false\0A\00"
@.str.string = private unnamed_addr constant [4 x i8] c"%s\0A\00"
