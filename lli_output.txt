define i32 @main(i32 %argc, i8** %argv){
    call void @gcd2.method.main.stringArray(i32 %argc, i8** %argv)
    ret i32 0
}
declare i32 @printf(i8*, ...)
declare i32 @atoi(...)
define void @printBoolean(i1 %b) {
    %1 = alloca i1
    store i1 %b, i1* %1
    %2 = load i1, i1* %1
    %3 = icmp eq i1 %2, 0
    br i1 %3, label %false, label %true
    false:
    %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.false, i32 0, i32 0))
    br label %ret
    true:
    %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.true, i32 0, i32 0))
    br label %ret
    ret:
    ret void
}
@gcd2.a = common global double 0.0
@gcd2.b = common global double 0.0
@gcd2.d = common global i32 0
@gcd2.c = common global i32 0
define void @gcd2.method.main.stringArray(i32 %argc, i8** %argv){
    %argc.addr = alloca i32
    %argv.addr = alloca i8**
    store i32 %argc, i32* %argc.addr
    store i8** %argv, i8*** %argv.addr
    %1 = alloca i32
    %.length = alloca i32
    store i32 %argc, i32* %1
    %2 = load i32, i32* %1
    %3 = sub nsw i32 %2, 1
    store i32 %3, i32* %.length



    %e = alloca i1
    %f = alloca i1
    %4 = load double, double* @gcd2.a
    %5 = alloca double
    store double 9.5000000000000000E+00, double* %5
    %6 = load double, double* %5
    store double %6, double* @gcd2.a
    %7 = load double, double* @gcd2.a
    %8 = load double, double* @gcd2.b
    %9 = alloca double
    store double 2.5000000000000000E+00, double* %9
    %10 = load double, double* %9
    store double %10, double* @gcd2.b
    %11 = load double, double* @gcd2.b
    %12 = load i32, i32* @gcd2.c
    %13 = alloca i32
    store i32 3, i32* %13
    %14 = load i32, i32* %13
    store i32 %14, i32* @gcd2.c
    %15 = load i32, i32* @gcd2.c
    %16 = load i32, i32* @gcd2.d
    %17 = alloca i32
    store i32 2, i32* %17
    %18 = load i32, i32* %17
    store i32 %18, i32* @gcd2.d
    %19 = load i32, i32* @gcd2.d
    %20 = load i1, i1* %e
    %21 = alloca i1
    store i1 0, i1* %21
    %22 = load i1, i1* %21
    store i1 %22, i1* %e
    %23 = load i1, i1* %e
    %24 = load i1, i1* %f
    %25 = alloca i1
    store i1 1, i1* %25
    %26 = load i1, i1* %25
    store i1 %26, i1* %f
    %27 = load i1, i1* %f
    %28 = alloca i32
    store i32 3, i32* %28
    %29 = load i32, i32* %28
    %30 = alloca double
    store double 5.2999999999999998E+00, double* %30
    %31 = load double, double* %30
    %32 = sitofp i32 %29 to double
%33 = fcmp oge double %32, %31
    call void @printBoolean(i1 %33)
    %34 = load double, double* @gcd2.a
    %35 = alloca i32
    store i32 6, i32* %35
    %36 = load i32, i32* %35
    %37 = sitofp i32 %36 to double
%38 = fcmp oge double %34, %37
    call void @printBoolean(i1 %38)
    %39 = alloca double
    store double 3.2999999999999998E+00, double* %39
    %40 = load double, double* %39
    %41 = fsub double -0.000000e+00, %40
    %42 = alloca i32
    store i32 5, i32* %42
    %43 = load i32, i32* %42
    %44 = sub nsw i32 0, %43
    %45 = sitofp i32 %44 to double
%46 = fcmp oge double %41, %45
    call void @printBoolean(i1 %46)
    %47 = alloca double
    store double 6.9000000000000004E+00, double* %47
    %48 = load double, double* %47
    %49 = load i32, i32* %.length
    %50 = sitofp i32 %49 to double
%51 = fcmp oge double %48, %50
    call void @printBoolean(i1 %51)
    ret void
}
@.str.int = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@.str.double = private unnamed_addr constant [7 x i8] c"%.16E\0A\00"
@.str.true = private unnamed_addr constant [6 x i8] c"true\0A\00"
@.str.false = private unnamed_addr constant [7 x i8] c"false\0A\00"
@.str.string = private unnamed_addr constant [4 x i8] c"%s\0A\00"
