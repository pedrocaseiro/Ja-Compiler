define i32 @main(i32 %argc, i8** %argv){
    call void @gcd2.method.main.stringArray(i32 %argc, i8** %argv)
    ret i32 0
}
declare i32 @printf(i8*, ...)
declare i32 @atoi(...)
define void @gcd2.method.main.stringArray(i32 %argc, i8** %argv){
    %argc.addr = alloca i32
    %argv.addr = alloca i8**
    store i32 %argc, i32* %argc.addr
    store i8** %argv, i8*** %argv.addr
    %1 = alloca i32
    %.length = alloca i32
    store i32 %argc, i32* %1
    %2 = load i32, i32* %1
    %3 = sub nsw i32 %2, 1
    store i32 %3, i32* %.length



    %a = alloca double
    %4 = load double, double* %a
    %5 = alloca double
    store double 5.7999999999999998E+00, double* %5
    %6 = load double, double* %5
    store double %6, double* %a
    %7 = alloca double
    store double 2.8999999999999999E+00, double* %7
    %8 = load double, double* %7
    %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.double, i32 0, i32 0), double %8)
    %10 = load double, double* %a
    %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.double, i32 0, i32 0), double %10)
    ret void
}
@.str.int = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@.str.double = private unnamed_addr constant [7 x i8] c"%.16E\0A\00"
@.str.true = private unnamed_addr constant [6 x i8] c"true\0A\00"
@.str.false = private unnamed_addr constant [7 x i8] c"false\0A\00"
@.str.string = private unnamed_addr constant [4 x i8] c"%s\0A\00"
