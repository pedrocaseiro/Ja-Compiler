define i32 @main(i32 %argc, i8** %argv){
    call void @gcd2.method.main.stringArray(i32 %argc, i8** %argv)
    ret i32 0
}
declare i32 @printf(i8*, ...)
declare i32 @atoi(...)
define void @printBoolean(i1 %b) {
    %1 = alloca i1
    store i1 %b, i1* %1
    %2 = load i1, i1* %1
    %3 = icmp eq i1 %2, 0
    br i1 %3, label %false, label %true
    false:
    %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.false, i32 0, i32 0))
    br label %ret
    true:
    %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.true, i32 0, i32 0))
    br label %ret
    ret:
    ret void
}
@gcd2.a = common global i32 0
define void @gcd2.method.main.stringArray(i32 %argc, i8** %argv){
    %argc.addr = alloca i32
    %argv.addr = alloca i8**
    store i32 %argc, i32* %argc.addr
    store i8** %argv, i8*** %argv.addr
    %1 = alloca i32
    %.length = alloca i32
    store i32 %argc, i32* %1
    %2 = load i32, i32* %1
    %3 = sub nsw i32 %2, 1
    store i32 %3, i32* %.length



    %4 = load i32, i32* @gcd2.a
    %5 = alloca i32
    store i32 5, i32* %5
    %6 = load i32, i32* %5
    store i32 %6, i32* @gcd2.a
    %7 = load i32, i32* @gcd2.a
    %8 = add nsw i32 %7, 1
    %9 = alloca i32
    store i32 %8, i32* %9
    %10 = load i32, i32* %9
    %11 = load i8**, i8*** %argv.addr
    %arrayidx0 = getelementptr inbounds i8*, i8** %11, i32 %10
    %12 = load i8*, i8** %arrayidx0
    %13 = call i32(i8*, ...) bitcast (i32(...)* @atoi to i32 (i8*, ...)*)(i8* %12)
    %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %13)
    ret void
}
@.str.int = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@.str.double = private unnamed_addr constant [7 x i8] c"%.16E\0A\00"
@.str.true = private unnamed_addr constant [6 x i8] c"true\0A\00"
@.str.false = private unnamed_addr constant [7 x i8] c"false\0A\00"
@.str.string = private unnamed_addr constant [4 x i8] c"%s\0A\00"
