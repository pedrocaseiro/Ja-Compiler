define i32 @main(i32 %argc, i8** %argv){
    call void @gcd2.method.main.stringArray(i32 %argc, i8** %argv)
    ret i32 0
}
declare i32 @printf(i8*, ...)
declare i32 @atoi(...)
define void @printBoolean(i1 %b) {
    %1 = alloca i1
    store i1 %b, i1* %1
    %2 = load i1, i1* %1
    %3 = icmp eq i1 %2, 0
    br i1 %3, label %false, label %true
    false:
    %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.false, i32 0, i32 0))
    br label %ret
    true:
    %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.true, i32 0, i32 0))
    br label %ret
    ret:
    ret void
}
@gcd2.a = common global double 0.0
@gcd2.b = common global double 0.0
@gcd2.d = common global i32 0
@gcd2.c = common global i32 0
define void @gcd2.method.main.stringArray(i32 %argc, i8** %argv){
    %argc.addr = alloca i32
    %argv.addr = alloca i8**
    store i32 %argc, i32* %argc.addr
    store i8** %argv, i8*** %argv.addr
    %1 = alloca i32
    %.length = alloca i32
    store i32 %argc, i32* %1
    %2 = load i32, i32* %1
    %3 = sub nsw i32 %2, 1
    store i32 %3, i32* %.length



    %4 = load i32, i32* @gcd2.d
    %5 = alloca i32
    store i32 3, i32* %5
    %6 = load i32, i32* %5
    store i32 %6, i32* @gcd2.d
    %7 = load i32, i32* @gcd2.d
    %8 = load double, double* @gcd2.a
    %9 = alloca double
    store double 3.0000000000000000E+00, double* %9
    %10 = load double, double* %9
    store double %10, double* @gcd2.a
    %11 = load double, double* @gcd2.a
    %r = alloca i1
    %12 = load i1, i1* %r
    %13 = alloca i1
    store i1 1, i1* %13
    %14 = load i1, i1* %13
    store i1 %14, i1* %r
    %15 = load i1, i1* %r
    %p = alloca i1
    %16 = load i1, i1* %p
    %17 = alloca i1
    store i1 1, i1* %17
    %18 = load i1, i1* %17
    store i1 %18, i1* %p
    %19 = load i1, i1* %p
    %e = alloca i1
    %20 = load i1, i1* %e
    %21 = load i1, i1* %p
    br label %land.entry0
land.entry0:
    %22 = icmp ne i1 %21, 0
    br i1 %22, label %land.rhs0, label %land.end0
land.rhs0:
    %23 = load i1, i1* %e
    %24 = icmp ne i1 %23, 0
    br label %land.end0
land.end0:
    %25 = phi i1 [0, %land.entry0], [%23, %land.rhs0]
    store i1 %25, i1* %e
    %26 = load i1, i1* %e
    %27 = load i1, i1* %r
    %28 = icmp ne i1 %27, 1
    %29 = load i1, i1* %e
    br label %land.entry1
land.entry1:
    %30 = icmp ne i1 %29, 0
    br i1 %30, label %land.rhs1, label %land.end1
land.rhs1:
    %31 = load i1, i1* %e
    %32 = icmp ne i1 %31, 1
    %33 = icmp ne i1 %32, 0
    br label %land.end1
land.end1:
    %34 = phi i1 [0, %land.entry1], [%32, %land.rhs1]
%35 = icmp ne i1 %28, %34
    call void @printBoolean(i1 %35)
    ret void
}
@.str.int = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@.str.double = private unnamed_addr constant [7 x i8] c"%.16E\0A\00"
@.str.true = private unnamed_addr constant [6 x i8] c"true\0A\00"
@.str.false = private unnamed_addr constant [7 x i8] c"false\0A\00"
@.str.string = private unnamed_addr constant [4 x i8] c"%s\0A\00"
