define i32 @main(i32 %argc, i8** %argv){
    call void @gcd2.method.main.stringArray(i32 %argc, i8** %argv)
    ret i32 0
}
declare i32 @printf(i8*, ...)
declare i32 @atoi(...)
define void @printBoolean(i1 %b) {
    %1 = alloca i1
    store i1 %b, i1* %1
    %2 = load i1, i1* %1
    %3 = icmp eq i1 %2, 0
    br i1 %3, label %false, label %true
    false:
    %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.false, i32 0, i32 0))
    br label %ret
    true:
    %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.true, i32 0, i32 0))
    br label %ret
    ret:
    ret void
}
@gcd2.c = common global i32 0
@gcd2.ddd = common global double 0.0
@gcd2.dddddd = common global double 0.0
define void @gcd2.method.main.stringArray(i32 %argc, i8** %argv){
    %argc.addr = alloca i32
    %argv.addr = alloca i8**
    store i32 %argc, i32* %argc.addr
    store i8** %argv, i8*** %argv.addr
    %1 = alloca i32
    %.length = alloca i32
    store i32 %argc, i32* %1
    %2 = load i32, i32* %1
    %3 = sub nsw i32 %2, 1
    store i32 %3, i32* %.length



    %asdfg = alloca double
    %4 = load double, double* %asdfg
    %5 = alloca double
    store double 5.5690000000000000E+07, double* %5
    %6 = load double, double* %5
    store double %6, double* %asdfg
    %7 = load double, double* %asdfg
    %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.double, i32 0, i32 0), double %7)
    %boo = alloca i1
    %9 = load i1, i1* %boo
    %10 = alloca i1
    store i1 1, i1* %10
    %11 = load i1, i1* %10
    store i1 %11, i1* %boo
    %12 = load i1, i1* %boo
    call void @printBoolean(i1 %12)
    %13 = load i1, i1* %boo
    call void @printBoolean(i1 %13)
    %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.string.0, i32 0, i32 0), i32 0)
    %15 = load i32, i32* %.length
    %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %15)
    %a = alloca i32
    %b = alloca i1
    %17 = load i1, i1* %b
    %18 = alloca i1
    store i1 1, i1* %18
    %19 = load i1, i1* %18
    store i1 %19, i1* %b
    %lllll = alloca i32
    %20 = load i32, i32* %lllll
    %21 = alloca i32
    store i32 5, i32* %21
    %22 = load i32, i32* %21
    store i32 %22, i32* %lllll
    %23 = load i32, i32* %a
    %24 = alloca i32
    store i32 4, i32* %24
    %25 = load i32, i32* %24
    store i32 %25, i32* %a
    %26 = load i32, i32* %a
    %27 = load i32, i32* %lllll
    store i32 %27, i32* %a
    %28 = load i32, i32* %a
    %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %28)
    %30 = load i1, i1* %b
    call void @printBoolean(i1 %30)
    %b1 = alloca i1
    %31 = load i1, i1* %b
    %32 = alloca i1
    store i1 0, i1* %32
    %33 = load i1, i1* %32
    store i1 %33, i1* %b
    %34 = load i32, i32* %a
    %35 = alloca i32
    store i32 5, i32* %35
    %36 = load i32, i32* %35
    store i32 %36, i32* %a
    %37 = load i32, i32* %a
    %38 = add nsw i32 %37, 1
    %39 = alloca i32
    store i32 %38, i32* %39
    %40 = load i32, i32* %39
    %41 = load i8**, i8*** %argv.addr
    %arrayidx0 = getelementptr inbounds i8*, i8** %41, i32 %40
    %42 = load i8*, i8** %arrayidx0
    %43 = call i32(i8*, ...) bitcast (i32(...)* @atoi to i32 (i8*, ...)*)(i8* %42)
    %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %43)
    %a23 = alloca i32
    %45 = load i32, i32* %a23
    %46 = alloca i32
    store i32 0, i32* %46
    %47 = load i32, i32* %46
    %48 = add nsw i32 %47, 1
    %49 = alloca i32
    store i32 %48, i32* %49
    %50 = load i32, i32* %49
    %51 = load i8**, i8*** %argv.addr
    %arrayidx1 = getelementptr inbounds i8*, i8** %51, i32 %50
    %52 = load i8*, i8** %arrayidx1
    %53 = call i32(i8*, ...) bitcast (i32(...)* @atoi to i32 (i8*, ...)*)(i8* %52)
    %54 = add nsw i32 %53, 1
    %55 = alloca i32
    store i32 %54, i32* %55
    %56 = load i32, i32* %55
    %57 = load i8**, i8*** %argv.addr
    %arrayidx2 = getelementptr inbounds i8*, i8** %57, i32 %56
    %58 = load i8*, i8** %arrayidx2
    %59 = call i32(i8*, ...) bitcast (i32(...)* @atoi to i32 (i8*, ...)*)(i8* %58)
    %60 = add nsw i32 %59, 1
    %61 = alloca i32
    store i32 %60, i32* %61
    %62 = load i32, i32* %61
    %63 = load i8**, i8*** %argv.addr
    %arrayidx3 = getelementptr inbounds i8*, i8** %63, i32 %62
    %64 = load i8*, i8** %arrayidx3
    %65 = call i32(i8*, ...) bitcast (i32(...)* @atoi to i32 (i8*, ...)*)(i8* %64)
    store i32 %47, i32* %a23
    %66 = load i32, i32* %a23
    %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %66)
    %d = alloca double
    %68 = load double, double* %d
    %69 = alloca double
    store double 5.5000000000000000E+00, double* %69
    %70 = load double, double* %69
    store double %70, double* %d
    %71 = load double, double* %d
    %72 = load double, double* %d
    %73 = fsub double -0.000000e+00, %72
    store double %73, double* %d
    %74 = load double, double* %d
    %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.double, i32 0, i32 0), double %74)
    %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.string.1, i32 0, i32 0), i32 0)
    %77 = load i32, i32* %a
    %78 = alloca i32
    store i32 11, i32* %78
    %79 = load i32, i32* %78
    store i32 %79, i32* %a
    %80 = load i32, i32* %a
    %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %80)
    %82 = load i32, i32* %a
    %83 = load i32, i32* %a
    %84 = sub nsw i32 0, %83
    store i32 %83, i32* %a
    %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.string.2, i32 0, i32 0), i32 0)
    %86 = load i32, i32* %a
    %87 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %86)
    %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.string.3, i32 0, i32 0), i32 0)
    %89 = alloca i32
    store i32 5, i32* %89
    %90 = load i32, i32* %89
    %91 = sub nsw i32 0, %90
    %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %91)
    %93 = load i32, i32* %a
    %94 = load i32, i32* %a
    %95 = sub nsw i32 0, %94
    %96 = sub nsw i32 0, %95
    %97 = sub nsw i32 0, %96
    store i32 %94, i32* %a
    %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.string.4, i32 0, i32 0), i32 0)
    %99 = load i32, i32* %a
    %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %99)
    %101 = load i32, i32* %a
    %102 = load i32, i32* %a
    %103 = sub nsw i32 0, %102
    %104 = sub nsw i32 0, %103
    store i32 %102, i32* %a
    %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.string.5, i32 0, i32 0), i32 0)
    %106 = load i32, i32* %a
    %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %106)
    %108 = load i1, i1* %b
    %109 = alloca i1
    store i1 1, i1* %109
    %110 = load i1, i1* %109
    store i1 %110, i1* %b
    %111 = load i1, i1* %b
    call void @printBoolean(i1 %111)
    %112 = load i1, i1* %b
    %113 = alloca i1
    store i1 0, i1* %113
    %114 = load i1, i1* %113
    store i1 %114, i1* %b
    %115 = load double, double* %d
    %116 = alloca double
    store double 5.1123122999999998E-41, double* %116
    %117 = load double, double* %116
    store double %117, double* %d
    %118 = load double, double* %d
    %119 = alloca double
    store double 5.0000000000000000E+05, double* %119
    %120 = load double, double* %119
    store double %120, double* %d
    %121 = load double, double* %d
    %122 = alloca double
    store double 5.1234000000000000E+08, double* %122
    %123 = load double, double* %122
    store double %123, double* %d
    %124 = load double, double* %d
    %125 = alloca double
    store double 5.0000000000000000E+45, double* %125
    %126 = load double, double* %125
    store double %126, double* %d
    %127 = load i32, i32* @gcd2.c
    %128 = alloca i32
    store i32 4, i32* %128
    %129 = load i32, i32* %128
    store i32 %129, i32* @gcd2.c
    %130 = load double, double* @gcd2.ddd
    %131 = alloca double
    store double 1.5600000000000001E+00, double* %131
    %132 = load double, double* %131
    store double %132, double* @gcd2.ddd
    %133 = load double, double* @gcd2.ddd
    %134 = alloca i32
    store i32 1, i32* %134
    %135 = load i32, i32* %134
    %136 = alloca i32
    store i32 %135, i32* %136
    %137 = load i32, i32* %136
    %138 = sitofp i32 %137 to double
    store double %138, double* @gcd2.ddd
    %139 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.string.6, i32 0, i32 0), i32 0)
    %xd = alloca i32
    %140 = load i32, i32* %xd
    %141 = alloca i32
    store i32 3, i32* %141
    %142 = load i32, i32* %141
    store i32 %142, i32* %xd
    %143 = load double, double* %d
    %144 = load i32, i32* %xd
    %145 = add nsw i32 %144, 1
    %146 = alloca i32
    store i32 %145, i32* %146
    %147 = load i32, i32* %146
    %148 = load i8**, i8*** %argv.addr
    %arrayidx4 = getelementptr inbounds i8*, i8** %148, i32 %147
    %149 = load i8*, i8** %arrayidx4
    %150 = call i32(i8*, ...) bitcast (i32(...)* @atoi to i32 (i8*, ...)*)(i8* %149)
    %151 = alloca i32
    store i32 %150, i32* %151
    %152 = load i32, i32* %151
    %153 = sitofp i32 %152 to double
    store double %153, double* %d
    %154 = load double, double* %d
    %155 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.double, i32 0, i32 0), double %154)
    %156 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.string.7, i32 0, i32 0), i32 0)
    %157 = load i32, i32* %a
    %158 = load i32, i32* %.length
    store i32 %157, i32* %a
    %159 = load i32, i32* %a
    %160 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %159)
    %161 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.string.8, i32 0, i32 0), i32 0)
    %162 = load double, double* @gcd2.ddd
    %163 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.double, i32 0, i32 0), double %162)
    %164 = load i1, i1* %b
    call void @printBoolean(i1 %164)
    %165 = load i1, i1* %b
    call void @printBoolean(i1 %165)
    %166 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.string.9, i32 0, i32 0), i32 0)
    %167 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.string.10, i32 0, i32 0), i32 0)
    %168 = alloca i1
    store i1 0, i1* %168
    %169 = load i1, i1* %168
    call void @printBoolean(i1 %169)
    %170 = alloca double
    store double 5.0000000000000000E+01, double* %170
    %171 = load double, double* %170
    %172 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.double, i32 0, i32 0), double %171)
    %173 = alloca i32
    store i32 10, i32* %173
    %174 = load i32, i32* %173
    %175 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %174)
    %176 = load i32, i32* %a
    %177 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %176)
    ret void
}
@.str.string.0 = private unnamed_addr constant [12 x i8] c"%%\5C%%\5C%%\0Aa\0A\00"
@.str.string.1 = private unnamed_addr constant [3 x i8] c"A\0A\00"
@.str.string.2 = private unnamed_addr constant [8 x i8] c"a = -a\0A\00"
@.str.string.3 = private unnamed_addr constant [8 x i8] c"LUL -5\0A\00"
@.str.string.4 = private unnamed_addr constant [10 x i8] c"a = ---a\0A\00"
@.str.string.5 = private unnamed_addr constant [9 x i8] c"a = --a\0A\00"
@.str.string.6 = private unnamed_addr constant [7 x i8] c"ARGS:\0A\00"
@.str.string.7 = private unnamed_addr constant [7 x i8] c"ARGS:\0A\00"
@.str.string.8 = private unnamed_addr constant [6 x i8] c"DDDD\0A\00"
@.str.string.9 = private unnamed_addr constant [9 x i8] c"LUUULL\0A\0A\00"
@.str.string.10 = private unnamed_addr constant [82 x i8] c"La%%fsfkhh\22hjsfahfshfsh\0Aasaddd '    \0C \09          asdas           \5C       sUUULL\0A\0A\00"
@.str.int = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@.str.double = private unnamed_addr constant [7 x i8] c"%.16E\0A\00"
@.str.true = private unnamed_addr constant [6 x i8] c"true\0A\00"
@.str.false = private unnamed_addr constant [7 x i8] c"false\0A\00"
@.str.string = private unnamed_addr constant [4 x i8] c"%s\0A\00"
