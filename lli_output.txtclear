define i32 @main(i32 %argc, i8** %argv){
    call void @gcd2.method.main.stringArray(i32 %argc, i8** %argv)
    ret i32 0
}
declare i32 @printf(i8*, ...)
define void @gcd2.method.main.stringArray(i32 %argc, i8** %argv){
    %argc.addr = alloca i32
    %argv.addr = alloca i8**
    %1 = alloca i32
DecLit
22
    store i32 85873904, i32* %1
    %2 = load i32, i32* %1
    %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.int, i32 0, i32 0), i32 %2)
    %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.string.0, i32 0, i32 0))
    %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.string.1, i32 0, i32 0))
    ret void
}
@.str.string.0 = private unnamed_addr constant [7 x i8] c"sfasf\0A\00"
@.str.string.1 = private unnamed_addr constant [26 x i8] c"ola\0Dola\0Cola\09ola\5Cola\5C\5Cola\0A\00"
@.str.int = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@.str.double = private unnamed_addr constant [7 x i8] c"%.16E\0A\00"
@.str.true = private unnamed_addr constant [6 x i8] c"true\0A\00"
@.str.false = private unnamed_addr constant [7 x i8] c"false\0A\00"
@.str.string = private unnamed_addr constant [4 x i8] c"%s\0A\00"
